#include <WiFi.h>
#include <WiFiMulti.h>
#include <FirebaseESP32.h>
#include "HX711.h"
#include <OneWire.h>
#include <DallasTemperature.h>
#include <time.h>


WiFiMulti wifi;

#define WIFI_SSID_1 "Hằng"
#define WIFI_PASS_1 "12345678"
#define WIFI_SSID_2 "Hang"
#define WIFI_PASS_2 "0971397361"
#define FIREBASE_HOST "https://test-fea1d-default-rtdb.asia-southeast1.firebasedatabase.app"
#define FIREBASE_API_KEY "AIzaSyCRiWwj3IyWB0GNT7lw-zx2g3U5o5Cw8iY"
#define USER_EMAIL "vuthithuhang24cv@gmail.com"
#define USER_PASSWORD "lovecats21.00"

FirebaseData fbData;
FirebaseConfig fbConfig;
FirebaseAuth fbAuth;

#define DOUT 21
#define SCK 22
HX711 canDienTu;
float heSoHieuChuan = 505.4633;
float canNang = 0;
float canCu = -1;

#define CHAN_CAM_BIEN_TDS 34
float chatLuongNuoc = 0;


#define CHAN_DO_DUC_TS300B 32
int doDucTS300B = 0;

int getMedianNum(int duLieu[], int soLuong) {
  int tam[soLuong];
  for (byte i = 0; i < soLuong; i++) tam[i] = duLieu[i];
  for (int j = 0; j < soLuong - 1; j++) {
    for (int i = 0; i < soLuong - j - 1; i++) {
      if (tam[i] > tam[i + 1]) {
        int tmp = tam[i];
        tam[i] = tam[i + 1];
        tam[i + 1] = tmp;
      }
    }
  }
  if (soLuong % 2 == 1)
    return tam[soLuong / 2];
  else
    return (tam[soLuong / 2] + tam[soLuong / 2 - 1]) / 2;
}

#define TEMP_SENSOR_PIN 18
OneWire oneWire(TEMP_SENSOR_PIN);
DallasTemperature sensors(&oneWire);
float nhietDo = 0;


#define ENA 5
#define IN1 26
#define IN2 27
#define ENB 23
#define IN3 14
#define IN4 12

void xoayGuong() {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  analogWrite(ENA, 255);
}

void dungGuong() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  analogWrite(ENA, 0);
}

void xoayThucAn() {
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  analogWrite(ENB, 50);
}

void dungThucAn() {
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
  analogWrite(ENB, 0);
}

bool dangChoAn = false;
unsigned long batDauChoAn = 0;
bool dangChoAnTheoGram = false;
bool daGhiLogThuCong = false;
String formatThoiGian() {
  time_t now = time(nullptr);
  struct tm* timeinfo = localtime(&now);
  char buf[20];
  sprintf(buf, "%02d:%02d %02d/%02d/%04d",
          timeinfo->tm_hour,
          timeinfo->tm_min,
          timeinfo->tm_mday,
          timeinfo->tm_mon + 1,
          timeinfo->tm_year + 1900);
  return String(buf);
}

void ghiLog(float gram, String mode) {
  if (Firebase.getInt(fbData, "/logs/counter")) {
    int counter = fbData.intData();
    String logPath = "/logs/log" + String(counter + 1);

    Firebase.setFloat(fbData, logPath + "/gram", gram);
    Firebase.setString(fbData, logPath + "/mode", mode);
    Firebase.setString(fbData, logPath + "/time", formatThoiGian());
    Firebase.setInt(fbData, "/logs/counter", counter + 1);
    Serial.println("Ghi log thành công: " + logPath);
  } else {
    Firebase.setInt(fbData, "/logs/counter", 1);
    Serial.println("Đã tạo log đầu tiên!");
  }
}

void setup() {
  Serial.begin(115200);
  delay(1000);

  wifi.addAP(WIFI_SSID_1, WIFI_PASS_1);
  wifi.addAP(WIFI_SSID_2, WIFI_PASS_2);
  Serial.print("Đang kết nối WiFi");
  while (wifi.run() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\n Đã kết nối WiFi!");

  fbConfig.database_url = FIREBASE_HOST;
  fbConfig.api_key = FIREBASE_API_KEY;
  fbAuth.user.email = USER_EMAIL;
  fbAuth.user.password = USER_PASSWORD;
  Firebase.begin(&fbConfig, &fbAuth);
  Firebase.reconnectWiFi(true);
  Serial.println("Firebase sẵn sàng!");

  canDienTu.begin(DOUT, SCK);
  canDienTu.set_scale(heSoHieuChuan);
  delay(2000);
  canDienTu.tare();

  sensors.begin();

  configTime(7 * 3600, 0, "pool.ntp.org");
  while (!time(nullptr)) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nĐồng bộ thời gian thành công");

  pinMode(ENA, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  dungGuong();
  dungThucAn();
}


void loop() {
  const int soMau = 15;
  int duLieuTDS[soMau];
  for (int i = 0; i < soMau; i++) {
    duLieuTDS[i] = analogRead(CHAN_CAM_BIEN_TDS);
    delay(10);
  }
  int adc = getMedianNum(duLieuTDS, soMau);

  if (adc < 10) {
    chatLuongNuoc = 0;
  } else {
    float dienAp = (adc * 3.3) / 4096.0;
    float heSoTDS = 0.75;
    chatLuongNuoc = (133.42 * pow(dienAp, 3) - 255.86 * pow(dienAp, 2) + 857.39 * dienAp) * heSoTDS;
  }

  Firebase.setFloat(fbData, "/aquarium/water_quality", chatLuongNuoc);
  Serial.printf("Chất lượng nước (TDS): %.0f ppm\n", chatLuongNuoc);
  time_t now = time(nullptr);
  String timestamp = String(now);
  Firebase.setFloat(fbData, "/tds_logs/" + timestamp, chatLuongNuoc);

  doDucTS300B = analogRead(CHAN_DO_DUC_TS300B);
  Firebase.setInt(fbData, "/aquarium/ts300b", doDucTS300B);
  Serial.printf("Độ đục TS-300B (raw): %d\n", doDucTS300B);

  sensors.requestTemperatures();
  nhietDo = sensors.getTempCByIndex(0);
  Firebase.setFloat(fbData, "/aquarium/temperature", nhietDo);
  Serial.printf("Nhiệt độ: %.2f °C\n", nhietDo);

  if (canDienTu.is_ready()) {
    canNang = canDienTu.get_units(20);
    if (canNang < 2.0) canNang = 0;

    if (abs(canNang - canCu) > 0.5) {
      canCu = canNang;
      Firebase.setFloat(fbData, "/aquarium/weight", canNang);
    }
    Serial.printf("Cân nặng: %.2f g\n", canNang);
  }

  if (Firebase.getBool(fbData, "/aquarium/control/guong")) {
    bool guong = fbData.boolData();
    guong ? xoayGuong() : dungGuong();
  }

  String mode = "";
  if (Firebase.getString(fbData, "/aquarium/control/thucan/mode")) {
    mode = fbData.stringData();
  }


  if (mode == "auto") {
    time_t now = time(nullptr);
    struct tm* timeinfo = localtime(&now);
    int gio = timeinfo->tm_hour;
    int phut = timeinfo->tm_min;

    if (!dangChoAn && ((gio == 6 && phut == 0) || (gio == 17 && phut == 0))) {
      float khoiLuongTruoc = canDienTu.get_units(10);
      Firebase.setFloat(fbData, "/aquarium/_temp_start_weight", khoiLuongTruoc);
      xoayThucAn();
      dangChoAn = true;
      batDauChoAn = millis();
      Serial.println("Bắt đầu cho ăn tự động");
    }

    if (dangChoAn && millis() - batDauChoAn >= 20000) {
      dungThucAn();
      dangChoAn = false;
      float khoiLuongTruoc = 0;
      float khoiLuongSau = canDienTu.get_units(10);

      if (Firebase.getFloat(fbData, "/aquarium/_temp_start_weight")) {
        khoiLuongTruoc = fbData.floatData();
      }

      float gram = khoiLuongSau - khoiLuongTruoc;
      if (gram < 0) gram = 0;
      Serial.printf("Kết thúc cho ăn tự động: %.2f gram\n", gram);
      ghiLog(gram, "auto");
    }
  }

  float target = 0;
  if (Firebase.getFloat(fbData, "/aquarium/control/thucan/target_gram")) {
    target = fbData.floatData();
  }

  if (target > 0 && !dangChoAnTheoGram) {
    float batDau = canDienTu.get_units(10);
    xoayThucAn();
    dangChoAnTheoGram = true;
    Serial.printf("Bắt đầu cho ăn %.2f gram\n", target);

    while ((canDienTu.get_units(10) - batDau) < target) {
      delay(500);
      if (Firebase.getFloat(fbData, "/aquarium/control/thucan/target_gram") && fbData.floatData() == 0) {
        Serial.println("Đã hủy giữa chừng");
        break;
      }
    }

    dungThucAn();
    Firebase.setFloat(fbData, "/aquarium/control/thucan/target_gram", 0);
    Firebase.setBool(fbData, "/aquarium/control/thucan/state", false);
    dangChoAnTheoGram = false;

    float khoiLuongSau = canDienTu.get_units(10);
    float daCho = khoiLuongSau - batDau;
    if (daCho < 0) daCho = 0;

    Serial.printf("Kết thúc cho ăn theo gram: %.2f g\n", daCho);
    ghiLog(daCho, "gram");
  }

  if (mode == "manual" && Firebase.getBool(fbData, "/aquarium/control/thucan/state")) {
    bool state = fbData.boolData();

    if (state && !daGhiLogThuCong) {
      xoayThucAn();
      daGhiLogThuCong = true;
      Serial.println("Bắt đầu cho ăn thủ công");
    }

    if (!state && daGhiLogThuCong) {
      dungThucAn();
      daGhiLogThuCong = false;
      Serial.println("Kết thúc cho ăn thủ công");
      ghiLog(0.0, "manual");
    }
  }

  delay(60000);
}
